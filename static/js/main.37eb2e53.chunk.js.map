{"version":3,"sources":["components/Header.js","components/Contents.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","className","Component","Contents","href","onClick","e","preventDefault","document","getElementById","scrollIntoView","behavior","Footer","App","props","state","currentDate","Date","dataIsLoaded","prevProps","prevState","snapshot","a","promises","urls","split","forEach","url","push","axios","Promise","all","then","result","console","log","catch","error","setState","fetchData","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iQAiBeA,G,kKAdX,WACI,OACI,6BAASC,GAAG,UACR,yBAAKC,UAAU,SACX,+CACA,oD,GANCC,cC4DNC,E,4JA3Dd,WACC,OACC,6BAASH,GAAG,WACX,6BAASA,GAAG,MAAMC,UAAU,4BAC3B,yBAAKA,UAAU,SACd,yBAAKA,UAAU,WACd,wBAAIA,UAAU,SAAd,sBACA,iDAOH,6BAASD,GAAG,MAAMC,UAAU,gCAC3B,yBAAKA,UAAU,SACd,yBAAKA,UAAU,WACd,wBAAIA,UAAU,SAAd,UACA,qGAGA,uBAAGG,KAAM,aAAcC,QAAS,SAACC,GACJA,EAAEC,iBACFC,SAASC,eAAe,aAAaC,eAAe,CAChDC,SAAU,YAEnBV,UAAU,WALlC,4C,GAtBgBC,aCqBRU,E,4JApBd,WACC,OACC,6BAASZ,GAAG,UACX,yBAAKC,UAAU,SACd,wBAAIA,UAAU,SAAd,sBACA,uPAIA,wBAAIA,UAAU,WACb,wBAAIA,UAAU,0BACb,uBAAGG,KAAK,UAAR,oC,GAZcF,aCgFNW,E,kDAnEX,WAAYC,GAAQ,IAAD,8BACf,gBACKC,MAAQ,CAETC,YAAa,IAAIC,KAAK,cACtBC,cAAc,GALH,E,0CASnB,WACI,OACI,yBAAKlB,GAAG,MAAMC,UAAU,iBACpB,yBAAKD,GAAG,gBACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,U,+BAQhB,c,gCAOA,SAAmBmB,EAAWC,EAAWC,M,sBAKzC,WAAY,IAAD,QACQ,uCAAG,4BAAAC,EAAA,4DACG,uCAEbC,EAAW,GACf,EAAKT,MAAMU,KAAKC,MAAM,KAAKC,SAAQ,SAAUC,GACzCJ,EAASK,KAAKC,IAJD,uCAIkBF,OALrB,SASRG,QAAQC,IAAIR,GACbS,MAAK,SAACC,GACHC,QAAQC,IAAI,yBAGfC,OAAM,SAACC,GACJH,QAAQC,IAAIE,GACZH,QAAQC,IAAI,gCAhBN,OAqBd,EAAKG,SAAS,CAAEpB,cAAc,IArBhB,2CAAH,qDAuBfqB,O,GA9DUC,IAAMtC,WCDJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,CACIxB,KAAM,uLAGdhB,SAASC,eAAe,SDsHtB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMiB,c","file":"static/js/main.37eb2e53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <section id=\"banner\">\r\n                <div className=\"inner\">\r\n                    <h2>[project title]</h2>\r\n                    <p>\r\n                        [project motto]\r\n                    </p>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Contents extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section id=\"wrapper\">\r\n\t\t\t\t<section id=\"one\" className=\"wrapper spotlight style1\">\r\n\t\t\t\t\t<div className=\"inner\">\r\n\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t<h2 className=\"major\">[artist statement]</h2>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t[project goals]\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\r\n\t\t\t\t<section id=\"two\" className=\"wrapper alt spotlight style2\">\r\n\t\t\t\t\t<div className=\"inner\">\r\n\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t<h2 className=\"major\">[Data]</h2>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tTalk about where we sourced the data from and what they mean/represent\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<a href={\"index.html\"} onClick={(e) => {\r\n                                    e.preventDefault()\r\n                                    document.getElementById('p5-canvas').scrollIntoView({ \r\n                                        behavior: 'smooth' \r\n                                    })\r\n                            }} className=\"special\">\r\n\t\t\t\t\t\t\t\tClick to scroll to visualization\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\r\n\t\t\t\t{/* <section id=\"three\" className=\"wrapper spotlight style3\">\r\n\t\t\t\t\t<div className=\"inner\">\r\n\t\t\t\t\t\t<a href=\"index.html\" className=\"image\">\r\n\t\t\t\t\t\t\t<img src={`${process.env.PUBLIC_URL}/images/pic03.jpg`} alt=\"\" />\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t<h2 className=\"major\">Nullam dignissim</h2>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tLorem ipsum dolor sit amet, etiam lorem\r\n\t\t\t\t\t\t\t\tadipiscing elit. Cras turpis ante, nullam sit\r\n\t\t\t\t\t\t\t\tamet turpis non, sollicitudin posuere urna.\r\n\t\t\t\t\t\t\t\tMauris id tellus arcu. Nunc vehicula id nulla\r\n\t\t\t\t\t\t\t\tdignissim dapibus. Nullam ultrices, neque et\r\n\t\t\t\t\t\t\t\tfaucibus viverra, ex nulla cursus.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<a href=\"index.html\" className=\"special\">\r\n\t\t\t\t\t\t\t\tLearn more\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section> */}\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Contents;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section id=\"footer\">\r\n\t\t\t\t<div className=\"inner\">\r\n\t\t\t\t\t<h2 className=\"major\">[meet the artists]</h2>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t[description of team with four circles (like ones above but a bit smaller) below this text block for our photos with photo captions that detail our names, emails, roles, skills, and whatever else that seems suitable]\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t<ul className=\"contact\">\r\n\t\t\t\t\t\t<li className=\"icon solid fa-envelope\">\r\n\t\t\t\t\t\t\t<a href=\"#index\">information@untitled.tld</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./styles/App.css\";\r\n\r\nimport axios from \"axios\"; // used for API stuff\r\n\r\n\r\n\r\nimport * as d3 from \"d3\";\r\nimport Header from \"./components/Header\";\r\nimport Contents from \"./components/Contents\";\r\n// import Features from \"./components/Features\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nclass App extends React.Component {\r\n    // you can create class-scope fields in here like in Java\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n\r\n            currentDate: new Date(\"1950-11-01\"), // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\r\n            dataIsLoaded: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"app\" className=\"app-container\">\r\n                <div id=\"page-wrapper\">\r\n                    <Header />\r\n                    <Contents />\r\n                    {/* <Features /> */}\r\n                    <Footer />\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this is called when the page is initially loaded/mounted\r\n        // console.log(\"Parent Mounted\");\r\n        //this.loadData(); // comment this out if using static files; loadData() will make API requests\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // when re-render occurs, componentDidUpdate() is called\r\n        // console.log(\"Parent Updated\");\r\n    }\r\n\r\n    loadData() {\r\n        const fetchData = async () => {\r\n            const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // proxy url that is used in combination with real url\r\n\r\n            let promises = []; // make an array of promises\r\n            this.props.urls.split(\",\").forEach(function (url) {\r\n                promises.push(axios(proxyurl + url)); // push request onto promise array\r\n            });\r\n\r\n            // order of promises is retained; reference: https://stackoverflow.com/questions/28066429/promise-all-order-of-resolved-values/28066851\r\n            await Promise.all(promises)\r\n                .then((result) => {\r\n                    console.log(\"Request successful\");\r\n\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    console.log(\"Switching to static files\");\r\n\r\n                });\r\n\r\n\r\n            this.setState({ dataIsLoaded: true }); // calling this.setState(...) forces re-render\r\n        };\r\n        fetchData();\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n// there is probably a way better way to do this, but new urls are added to end of the urls csv string\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App\r\n            urls={\"https://global-warming.org/api/co2-api,https://global-warming.org/api/methane-api,https://global-warming.org/api/nitrous-oxide-api,https://global-warming.org/api/temperature-api\"}\r\n        />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}